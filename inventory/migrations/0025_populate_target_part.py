# Generated by Django 5.2 on 2025-05-21 20:44

from django.db import migrations


def forwards_func(apps, schema_editor):
    Inspection = apps.get_model('inventory', 'Inspection')
    # Определения TargetPart (копируем из модели, чтобы миграция была самодостаточной)
    TARGET_PART_DEVICE = "device"
    TARGET_PART_CABLE = "cable"
    TARGET_PART_PSU = "psu"

    for inspection in Inspection.objects.all():
        # Проверяем, есть ли device_name и не пустое ли оно
        if inspection.device_name and inspection.device_name.strip():
            device_name_lower = inspection.device_name.lower()

            if "netzteil" in device_name_lower or "steckernetzteil" in device_name_lower:
                inspection.target_part = TARGET_PART_PSU
            elif "kaltgeräteleitung" in device_name_lower or \
                 "anschlussleitung" in device_name_lower or \
                 "verlängerungsleitung" in device_name_lower or \
                 "kabel" in device_name_lower: # Общее слово "кабель"
                inspection.target_part = TARGET_PART_CABLE
            else:
                inspection.target_part = TARGET_PART_DEVICE
        else:
            if not inspection.target_part: # Только если оно совсем пустое
                 inspection.target_part = TARGET_PART_DEVICE

        inspection.save(update_fields=['target_part'])

def backwards_func(apps, schema_editor):
    # В этой миграции откат не предусмотрен, чтобы не усложнять
    # и не рисковать потерей данных, если они были изменены вручную после.
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0023_alter_inspection_device_name_and_more'), # Убедитесь, что это имя вашей ПРЕДЫДУЩЕЙ миграции
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
